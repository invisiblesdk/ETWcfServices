//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ETWebsite.RouteReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RouteReference.IRoute")]
    public interface IRoute {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/GetRoute", ReplyAction="http://tempuri.org/IRoute/GetRouteResponse")]
        ETApplicationServices.DTOs.RouteDto[] GetRoute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/GetRoute", ReplyAction="http://tempuri.org/IRoute/GetRouteResponse")]
        System.Threading.Tasks.Task<ETApplicationServices.DTOs.RouteDto[]> GetRouteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/PostRoute", ReplyAction="http://tempuri.org/IRoute/PostRouteResponse")]
        string PostRoute(ETApplicationServices.DTOs.RouteDto routeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/PostRoute", ReplyAction="http://tempuri.org/IRoute/PostRouteResponse")]
        System.Threading.Tasks.Task<string> PostRouteAsync(ETApplicationServices.DTOs.RouteDto routeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/PutRoute", ReplyAction="http://tempuri.org/IRoute/PutRouteResponse")]
        string PutRoute(ETApplicationServices.DTOs.RouteDto routeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/PutRoute", ReplyAction="http://tempuri.org/IRoute/PutRouteResponse")]
        System.Threading.Tasks.Task<string> PutRouteAsync(ETApplicationServices.DTOs.RouteDto routeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/DeleteRoute", ReplyAction="http://tempuri.org/IRoute/DeleteRouteResponse")]
        string DeleteRoute(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/DeleteRoute", ReplyAction="http://tempuri.org/IRoute/DeleteRouteResponse")]
        System.Threading.Tasks.Task<string> DeleteRouteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/GetRouteById", ReplyAction="http://tempuri.org/IRoute/GetRouteByIdResponse")]
        ETApplicationServices.DTOs.RouteDto GetRouteById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/GetRouteById", ReplyAction="http://tempuri.org/IRoute/GetRouteByIdResponse")]
        System.Threading.Tasks.Task<ETApplicationServices.DTOs.RouteDto> GetRouteByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/Message", ReplyAction="http://tempuri.org/IRoute/MessageResponse")]
        string Message();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoute/Message", ReplyAction="http://tempuri.org/IRoute/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRouteChannel : ETWebsite.RouteReference.IRoute, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RouteClient : System.ServiceModel.ClientBase<ETWebsite.RouteReference.IRoute>, ETWebsite.RouteReference.IRoute {
        
        public RouteClient() {
        }
        
        public RouteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RouteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ETApplicationServices.DTOs.RouteDto[] GetRoute() {
            return base.Channel.GetRoute();
        }
        
        public System.Threading.Tasks.Task<ETApplicationServices.DTOs.RouteDto[]> GetRouteAsync() {
            return base.Channel.GetRouteAsync();
        }
        
        public string PostRoute(ETApplicationServices.DTOs.RouteDto routeDto) {
            return base.Channel.PostRoute(routeDto);
        }
        
        public System.Threading.Tasks.Task<string> PostRouteAsync(ETApplicationServices.DTOs.RouteDto routeDto) {
            return base.Channel.PostRouteAsync(routeDto);
        }
        
        public string PutRoute(ETApplicationServices.DTOs.RouteDto routeDto) {
            return base.Channel.PutRoute(routeDto);
        }
        
        public System.Threading.Tasks.Task<string> PutRouteAsync(ETApplicationServices.DTOs.RouteDto routeDto) {
            return base.Channel.PutRouteAsync(routeDto);
        }
        
        public string DeleteRoute(int id) {
            return base.Channel.DeleteRoute(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRouteAsync(int id) {
            return base.Channel.DeleteRouteAsync(id);
        }
        
        public ETApplicationServices.DTOs.RouteDto GetRouteById(int id) {
            return base.Channel.GetRouteById(id);
        }
        
        public System.Threading.Tasks.Task<ETApplicationServices.DTOs.RouteDto> GetRouteByIdAsync(int id) {
            return base.Channel.GetRouteByIdAsync(id);
        }
        
        public string Message() {
            return base.Channel.Message();
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync() {
            return base.Channel.MessageAsync();
        }
    }
}
